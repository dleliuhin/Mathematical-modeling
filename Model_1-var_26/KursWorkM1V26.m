function KursWorkM1V26
%Очищаем командное окно
clc 
%Очищаем область переменных
clear all;
%Стартовый блок (инициализация, объявление переменных)
%Объявление всех используемых переменных
syms p1 p2 p3 p4 p5 p6 x1 x2 ;
%Присваиваем некоторым переменным значения из условия задания
p1=0.5;
p3=1.0e+55;
p5=0.8;
p6=0;
%.........................................................................
%Запишем два главных уравнения из задания
dx1dt=-p1*x1+p2*(1-x1)*exp(x2/(x2/p3 + 1))
dx2dt=-p1*x2+p2*p4*(1-x1)*exp(x2/(x2/p3 + 1))-p5*(x2-p6)
%Создаем дополнительные переменные, которые будем исп. для вычислений
x1m=x1;
x2m=x2;
p2m=p2;
p4m=p4;
%.........................................................................
%Блок аналитических преобразований
fprintf('Строим матрицу Якоби:');
jac=jacobian([dx1dt,dx2dt],[x1m,x2m])
fprintf('Строим сумму главных диагоналей:');
gld=simplify(jac(1,1)+jac(2,2))
%Составим систему уравнений:
SYSTEM=[dx1dt;dx2dt;gld]
fprintf('Умножим (1) уравнение на p4:');
SYSTEM(1)=SYSTEM(1)*p4
fprintf('Вычтем (1) уравнение из (2):');
act2=SYSTEM(2)-SYSTEM(1)
fprintf('Упростим получившееся уравнение');
act2=simplify(act2)
fprintf('Выразим x1:');
x1=solve(act2,x1)
%Создаем буферную переменную act3 равную dx1dt, чтобы подставить в нее
%некоторые значения, не изменяя исходного уравнения
act3=dx1dt;
fprintf('Подставим x1 в (1):');
act3=subs(act3,x1)
fprintf('Решим уравнение по параметру p2:');
p2=solve(act3,p2m)
fprintf('Упростим получившееся уравнение');
p2=simplify(p2)
fprintf('Подставим p2 и x1 в (3):');
act4=simplify(subs(SYSTEM(3),[p2m,x1m],[p2,x1]))
fprintf('Выразим p4 из (3):');
p4=solve(act4,p4)
%..........................................................................
%Блок вычислений
%Инициализируем рабочие массивы, куда будем добавлять все значения переменных
X1=[];X2=[];P2=[];P4=[];L1=[];L2=[];J=[];

%Счетчик общего колличества точек
iter=0;

%Начинаем варьировать x2
for x2t=1.0:0.1:4.0
    %Подставляем х2 в р4:
    p4t=double(subs(p4,[x2m],[x2t]));
    %Подставляем х2,р4 в р2:
    p2t=double(subs(p2,[x2m,p4m],[x2t,p4t]));
    %Подставляем х2,р4 в x1:
    x1t=double(subs(x1,[x2m,p4m],[x2t,p4t]));
    %Подставляем x1,х2,p2,p4 в матрицу Якоби:
    jact=double(subs(jac,[x1m,x2m,p2m,p4m],[x1t,x2t,p2t,p4t]));
    %Находим определитель матрицы Якоби
    dtjac=double(det(jact));
    %Находим собственные значения матрицы Якоби (будет комплексным числом)
    lajac=double(eig(jact));    
    %Находим сумму элементов главной диагонали матрицы Якоби
    gldt=jact(1,1)+jact(2,2);
    %Увеличиваем счетчик общего колличества точек
    iter=iter+1;

    %Проверяем выполнимость выполнения условия бифуркации,
    %а также p2,p4>0 из условия задания
    if (p2t>0 && p4t>0 && isreal(lajac(1))~=1 && isreal(lajac(2))~=1)
        fprintf('\tx2=%1.1f | x1=%5.5f | p2=%5.5f | p4=%5.5f | |J|=%5.5f | G=%5.5f | L1=%s | L2=%s\n',...
                   x2t,x1t,p2t,p4t,dtjac,gldt,num2str(lajac(1)),num2str(lajac(2)));
    %Если условие выполняется, то записываем в инициализированные массивы
    %полученные значения переменных
    X1(end+1)=x1t;
    X2(end+1)=x2t;
    P4(end+1)=p4t;
    P2(end+1)=p2t;
    L1(end+1)=lajac(1);
    L2(end+1)=lajac(2);
    J(end+1)=dtjac;
    %В противном же случае присваиваем пустые значения полученным
    %переменным, ибо значения нам понадобятся для вывода и анализа 
    %результатов работы программы в Командное Окно (Command Window)
    else
        fprintf('\tx2=%1.1f | x1=%5.5f | p2=%5.5f | p4=%5.5f | |J|=%5.5f | G=%5.5f | L1=%s | L2=%s\n',...
                   x2t,NaN,NaN,NaN,NaN,NaN,NaN,NaN);
    end
    fprintf('\n');
end
%..........................................................................
%Блок построения графика
%Используем собственную функцию построения графика р4(р2)
myplot(P2,P4,L1,L2,J);

%..........................................................................
%Блок проверки
test(X1,X2,P2,P4,L1,L2,J);

%Под конец обнуляем рабочие массивы значений переменных
X1=[];X2=[];P2=[];P4=[];L1=[];L2=[];J=[];
end        