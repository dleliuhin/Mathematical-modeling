function Main_v29_m4
clc %Очищаем Окно Команд и область переменных
clear all;%Очищаем область переменных после предыдущих вычислений
%.............................Инициализация................................
%Объявление всех используемых переменных
syms p1 p2 p3 p4 p5;
syms x1 x2;
%Присваиваем некоторым переменным значения из условия задания
p2=1.5;
p3=3;
p5=0.01;
%Запиcываем два главных уравнения из задания
dx1dt=p1*(p5+x1^p3)/(1+x1^p3)-x1*(1+x2)
dx2dt=x1*(p2+x2)-p4*x2
%Создаем дополнительные переменные, которые будем исп. для вычислений
p1j=p1;%Присваиваем значение p1 в буферную переменную
p4j=p4;%Присваиваем значение p4 в буферную переменную
x1j=x1;%Присваиваем значение x1 в буферную переменную
x2j=x2;%Присваиваем значение x2 в буферную переменную
%......................Блок аналитических преобразований...................
fprintf('Строим матрицу Якоби:');
maj=jacobian([dx1dt,dx2dt],[x1j,x2j])
%Составляем систему из двух уравнений
SYS=[dx1dt;dx2dt]
%Создаем 2 переменные, идентичные двум уравнениям системы и 
%которые будем использовать для промежуточных вычислений, 
%(Чтобы не менять переменные dx1dt и dx2dt)
equ1=SYS(1);
equ2=SYS(2);
fprintf('Выразим x2 из (2)-го уравнения системы:');
x2=solve(equ2,x2)
fprintf('Подставим x2 в (1)-ое уравнение системы:');
equ1=subs(equ1,[x2j],[x2])
fprintf('Выразим p1 из (1)-го уравнения системы:');
p1=solve(equ1,p1)
%..........................Блок вычислений.................................
%Создаем пустые массивы, в которые будем записывать все значения переменных
%!!!Только за 1 цикл
X1=[];X2=[];P1=[];P4=[];L1=[];L2=[];J=[];G=[];

%Создаем пустые массивы, в которые будем записывать все значения переменных
%За все циклы. Необходимо для тестового блока проверки
TX1=[];TX2=[];TP1=[];TP4=[];

%Создаем переменную fig, значение которой равно номеру графика
fig=1;%Устанавливаем fig значение 1
%Создаем переменную p4t и устанавливаем значение 0.5
p4t=0.5;

%Внешний цикл по р4 (задачу решаем 4 раза)
while p4t<=2
    %Варьируем переменную х1
    for x1t=-1:0.1:3.5
    %Блок try-catch необходим для игнорирования ошибок и предупреждений
    %вида 'Деление на ноль' при вычислении значений переменных    
    try
    %Подставляем х1 и р4 в р1
    p1t=double(subs(p1,[x1j,p4j],[x1t,p4t]));
    %Подставляем х1 и р4 в x2
    x2t=double(subs(x2,[x1j,p4j],[x1t,p4t]));
    %Подставляем x1,х2,p1,p4 в матрицу Якоби:
    jact=double(subs(maj,[x1j,x2j,p1j,p4j],[x1t,x2t,p1t,p4t]));
    %Находим определитель матрицы Якоби
    detJ=double(det(jact));
    %Находим сумму элементов главной диагонали матрицы Якоби
    gl=jact(1,1)+jact(2,2);
    %Находим собственные значения матрицы Якоби (будет комплексным числом)
    Laj=double(eig(jact));        
    catch
    end
    %Вводим условие из задания (ОДЗ переменных)
    if (p1t>0 && p4t>0 && p5>0 && x1t>0 && x2t>0 && p2>1 && p3>1)
    %Пока выполняется цикл будем выводить результаты в Окно Команд
    fprintf('\tp4=%3.1f | x1=%3.2f | x2=%5.3f | p1=%5.3f | |J|=%5.3f | G=%5.3f | L1=%s | L2=%s\n',...
                   p4t,x1t,x2t,p1t,detJ,gl,num2str(Laj(1)),num2str(Laj(2)));
    %При выполнении условия, записываем значения переменных в 
    %отдельные отведенные для них массивы
            X1(end+1)=x1t;
            X2(end+1)=x2t;
            P1(end+1)=p1t;
            P4(end+1)=p4t;
            J(end+1)=detJ;
            G(end+1)=gl;
            L1(end+1)=Laj(1);
            L2(end+1)=Laj(2);
            
            TX1(end+1)=x1t;
            TX2(end+1)=x2t;
            TP1(end+1)=p1t;
            TP4(end+1)=p4t;         
    else
        %В противном случае выводим значения NaN
    fprintf('\tp4=%1.1f | x1=%1.2f | x2=%5.3f | p1=%5.3f | |J|=%5.3f | G=%5.3f | L1=%s | L2=%s\n',...
                   p4t,x1t,NaN,NaN,NaN,NaN,NaN,NaN);        
    end 
    fprintf('\n');
    end
    
    %Строим график х1(р1)
    fig=myplot(p4t,fig,X1,P1,L1,L2);
    %Строим график х2(р1)
    fig=myplot(p4t,fig,X2,P1,L1,L2);
    
    %Увеличиваем по окончанию цикла значение р4 на 0.5 единиц
    p4t=p4t+0.5;
    
    %По окончанию вычислений обнуляем все массивы значений переменных
    X1=[];X2=[];P1=[];P4=[];L1=[];L2=[];J=[];G=[];
    
    fprintf('\n');
end

%Блок проверки
test(TX1,TX2,TP1,TP4);

%По окончанию вычислений обнуляем все массивы значений переменных
TX1=[];TX2=[];TP1=[];TP4=[];
end