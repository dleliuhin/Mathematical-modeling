function M=AMainStarih
%Очищаем Окно Команд и область переменных
clc
clear all;
%Объявление переменных для блока А
syms p1 p3 p4 p5 p6;
p1=1;
p3=20;
p4=10;
p5=0.6;
p6=-5;
%Далее объявляем статические переменные 
syms x1 x2 p2;
syms maj majt;
sym la;
%Исходные уравнения 
dx1dt=-p1*x1+p2*(1-x1)*exp(x2/(1+x2/p3))
dx2dt=-p1*x2+p2*p4*(1-x1)*exp(x2/(1+x2/p3))-p5*(x2-p6)
x1m=x1;
x2m=x2;
p2m=p2;
%Блок аналитических преобразований
SYSTEM2=[dx1dt;dx2dt]
fprintf('Умножим (1) уравнение на p4:');
SYSTEM2(1)=SYSTEM2(1)*p4
fprintf('Вычтем (1) уравнение из (2):');
act2=SYSTEM2(2)-SYSTEM2(1)
fprintf('Упростим получившееся уравнение');
act2=simplify(act2)
fprintf('Выразим x1:');
x1=solve(act2,x1)
fprintf('Подставим x1 в (1):');
act3=dx1dt;
act3=subs(act3,x1)
fprintf('Решим уравнение по параметру p2:');
p2=solve(act3,p2)
fprintf('Упростим получившееся уравнение');
p2=simplify(p2)
fprintf('Строим матрицу Якоби:');
jac=jacobian([dx1dt,dx2dt],[x1m,x2m])
%Инициализируем массивы, в которые будем закидывать результаты вычислений
P2=[];X2=[];X1=[];LA1=[];LA2=[];
%Начинаем варьировать х2 по заданному диапазону
for x2t=-2.0:0.1:5.0
   %Подставляем х2 в функцию переменной х1 
   x1t=double(subs(x1,[x2],[x2t]));
   try
   %Подставляем х2 в функцию параметра р2
   p2t=double(subs(p2,[x2],[x2t]));
   catch
   end      
   %Подставляем вычисленные значения х1,х2,р2 в матрицу Якоби
   jact=double(subs(jac,[x1m,x2m,p2m],[x1t,x2t,p2t]));
   %Вычисляем собственные значения матрицы Якоби
   la=double(eig(jact));
   %Вводим логическое условие задачи для фильтрации "плохих" точек
   if (p2t>0 && x1t>0 && x1t<1)
       %Выводим все подходящие точки в Командное Окно
       fprintf('\tx2=%4.1f | x1=%5.5f | p2=%5.5f | L1=%s | L2=%s \n', ...
                  x2t,x1t,p2t,num2str(la(1)),num2str(la(2)));
       %Добавляем значения в массивы
       X2(end+1)=x2t;
       X1(end+1)=x1t;
       P2(end+1)=p2t;
       LA1(end+1)=la(1);
       LA2(end+1)=la(2);
   else
       %Если условие не выполняется выводим NaN
       fprintf('\tx2=%4.1f | x1=%5.5f | p2=%5.5f | L1=%s | L2=%s \n', ...
                  x2t,NaN,NaN,NaN,NaN);
   end
   %fprintf('\n');
end
%Переменная str служит для управления построением графиков в разные фигуры
str=1;
%Строим график х1(р2)
myplotA(P2,X1,LA1,LA2,str);
str=2;
%Строим график х2(р2)
myplotA(P2,X2,LA1,LA2,str);
%Блок проверки
fprintf('\tБлок проверки: \n');
for q=1:length(P2)
    %Подставляем в первое уравнение все известные значения
    f1=double(subs(dx1dt,[p2m,x1m,x2m],[P2(q),X1(q),X2(q)]));
    %Подставляем во второе уравнение все известные значения
    f2=double(subs(dx2dt,[p2m,x1m,x2m],[P2(q),X1(q),X2(q)]));
    %Подставляем в матрицу Якоби все известные значения
    DETMAJ=double(subs(jac,[p2m,x1m,x2m],[P2(q),X1(q),X2(q)]));
    %Вычисляем определитель матрицы Якоби
    deter=det(DETMAJ);
    %Выводим блок проверки в Командное Окно
fprintf('\t x2=%4.1f | x1=%5.5f | p2=%5.5f | |J|=%5.5f | dx1dt=%5.5f | dx2dt=%5.5f \n', ...
                  X2(q),X1(q),P2(q),deter,f1,f2);
end
end